generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id              String  @id @default(cuid())
  type            String

  posts           Post[]
}

enum Gender {
    MALE
    FEMALE
}

model User {
  id            String        @id @default(cuid())
  name          String?
  slug          String?       @unique
  email         String?       @unique
  emailVerified DateTime?

  gender        Gender        @default(MALE)
  setupDone     Boolean       @default(false)
  hobbies       String[]      @default([])
  age           Int?  
  image         String?
  banner        String?
  bio           String?
  socials       Social[]

  accounts      Account[]
  sessions      Session[]

  following     UserFollows[] @relation("FollowsRelation")
  followers     UserFollows[] @relation("FollowedByRelation")

  authoredPosts Post[]        @relation("Author")
  likedPosts    PostLike[]    @relation("Likes")
  dislikedPosts PostDislike[] @relation("Dislikes")

  authoredComments Comment[]       @relation("Author")
  likedComments    CommentLike[]   @relation("Likes")
  dislikedComments CommentDislike[] @relation("Dislikes")

  notifications     Notification[]

  conversations Conversation[]
  messages      Message[]    

  createdAt     DateTime      @default(now())
}

model PostLike {
  postId    String
  userId    String
  post      Post   @relation("Likes", fields: [postId], references: [id])
  user      User   @relation("Likes", fields: [userId], references: [id])

  @@id([postId, userId])
}

model PostDislike {
  postId    String
  userId    String
  post      Post   @relation("Dislikes", fields: [postId], references: [id])
  user      User   @relation("Dislikes", fields: [userId], references: [id])

  @@id([postId, userId])
}

model Post {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  content   String?
  author    User        @relation("Author", fields: [authorId], references: [id])
  authorId  String

  comments  Comment[]   @relation("PostComments")
  likes     PostLike[]  @relation("Likes")
  dislikes  PostDislike[] @relation("Dislikes")

  attachmentId   String?
  attachment Attachment?    @relation(fields: [attachmentId], references: [id])
}

model Comment {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  content     String
  author      User          @relation("Author", fields: [authorId], references: [id])
  authorId    String

  post        Post          @relation("PostComments", fields: [postId], references: [id])
  postId      String

  likes       CommentLike[] @relation("Likes")
  dislikes    CommentDislike[] @relation("Dislikes")
}

model CommentDislike {
  commentId   String
  userId      String
  comment     Comment @relation("Dislikes", fields: [commentId], references: [id])
  user        User    @relation("Dislikes", fields: [userId], references: [id])

  @@id([commentId, userId])
}

model CommentLike {
  commentId String
  userId    String
  comment   Comment @relation("Likes", fields: [commentId], references: [id])
  user      User   @relation("Likes", fields: [userId], references: [id])

  @@id([commentId, userId])
}


model UserFollows {
    followerId    String
    followingId   String
    follower      User      @relation("FollowsRelation", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    following     User      @relation("FollowedByRelation", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([followerId, followingId])
}

enum SocialType {
    DISCORD
    EMAIL
    URL
    GITHUB
}

model Social {
    id            String   @id @default(cuid())
    type          SocialType

    url           String
    text          String

    userId        String
    user          User  @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum NotificationType {
  FOLLOW
  LIKE
  MESSAGE
  COMMENT
}

model Notification {
  id      String      @default(uuid())
  type    NotificationType
  image   String?
  title   String
  content String
  read    Boolean     @default(false)

  recipientId   String
  recipient     User    @relation(references: [id], fields: [recipientId])

  createdAt     DateTime    @default(now())

  @@id([id])
}

model Conversation {
  id        String      @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userIds   String[] 
  users     User[]
  messages  Message[] 
}

model Message {
  id             Int         @id @default(autoincrement())
  content        String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  seen           Boolean     @default(false)
  imageUrl       String?    
  authorId       String        
  author         User        @relation(fields: [authorId], references: [id]) 
  conversationId String        
  conversation   Conversation @relation(fields: [conversationId], references: [id]) 
}