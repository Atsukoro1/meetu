generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
    MALE
    FEMALE
}

model User {
    id            String    @id @default(cuid())
    name          String?
    slug          String?   @unique
    email         String?   @unique
    emailVerified DateTime?

    gender        Gender    @default(MALE)
    setupDone     Boolean   @default(false)
    hobbies       String[]  @default([])
    age           Int?  
    image         String?
    banner        String?
    bio           String?
    socials       Social[]

    accounts      Account[]
    sessions      Session[]

    following     UserFollows[]  @relation("FollowsRelation")
    followers     UserFollows[]  @relation("FollowedByRelation")
}

model UserFollows {
    followerId    String
    followingId   String
    follower      User      @relation("FollowsRelation", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    following     User      @relation("FollowedByRelation", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([followerId, followingId])
}

enum SocialType {
    DISCORD
    EMAIL
    URL
    GITHUB
}

model Social {
    id            String   @id @default(cuid())
    type          SocialType

    url           String
    text          String

    userId        String
    user          User  @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}